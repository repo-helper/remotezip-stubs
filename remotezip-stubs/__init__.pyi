# stdlib
import io
import zipfile
from typing import IO, Any, Callable, Optional, Tuple

# 3rd party
from requests import Session

class RemoteZipError(Exception): ...

class OutOfBound(RemoteZipError): ...

class RemoteIOError(RemoteZipError): ...

class RangeNotSupported(RemoteZipError): ...

class PartialBuffer:
	buffer: IO
	offset: int
	size: int
	position: int
	stream: Any

	def __init__(self, buffer: IO, offset: int, size: int, stream: Any) -> None: ...
	def __len__(self) -> int: ...
	def read(self, size: int = ...) -> bytes: ...
	def close(self) -> None: ...
	def tell(self) -> int: ...
	def seek(self, offset: int, whence: int) -> int: ...

class RemoteIO(io.IOBase):
	buffer: PartialBuffer

	def __init__(self, fetch_fun: Callable, initial_buffer_size: int = ...) -> None: ...
	def set_position_to_size(self, position_to_size) -> None: ...
	def read(self, size: int = ...): ...
	def seekable(self) -> bool: ...
	def seek(self, offset, whence: int = ...): ...
	def tell(self) -> int: ...
	def close(self) -> None: ...

class RemoteFetcher:
	def __init__(

			self, url: str, session: Session | None = ..., support_suffix_range: bool = ..., **kwargs
			) -> None: ...

	@staticmethod
	def parse_range_header(content_range_header): ...

	@staticmethod
	def build_range_header(range_min, range_max): ...

	def prepare_request(self, data_range: Tuple[int, Optional[int]] | None = ...): ...
	def get_file_size(self): ...
	def fetch(self, data_range: Tuple[int, Optional[int]], stream: bool = ...): ...

class RemoteZip(zipfile.ZipFile):

	def __init__(
			self,
			url,
			initial_buffer_size=...,
			session: Session | None = ...,
			fetcher=...,
			support_suffix_range: bool = ...,
			**kwargs
			) -> None: ...

	def size(self) -> int: ...
